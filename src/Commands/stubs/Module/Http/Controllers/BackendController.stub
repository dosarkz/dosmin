<?php

namespace App\Modules\$module_name$\Http\Controllers;

use App\Modules\Office\Http\Requests\Store$module_name$Request;
use App\Modules\Office\Http\Requests\Update$module_name$Request;
use App\Modules\Office\Models\$module_name$;
use Dosarkz\LaravelAdmin\Controllers\ModuleController;
use Dosarkz\LaravelAdmin\Modules\Image\Models\File;
use Dosarkz\LaravelAdmin\Modules\Image\Models\Image;
use Dosarkz\LaravelUploader\BaseUploader;
use Illuminate\Http\Request;
use Illuminate\Http\Response;

class BackendController extends ModuleController
{
    public function __construct()
    {
        $this->setModule('office');
        $this->setModel(new Office());
    }

    /**
     * Display a listing of the resource.
     * @return Response
     */
    public function index()
    {
        $model = $this->getModel()->paginate();
        $module = $this->getModule();
        return view($this->getModule()->alias . '::backend.index', compact('model', 'module'));
    }

    /**
     * Show the form for creating a new resource.
     * @return Response
     */
    public function create()
    {
        $model = $this->getModel();
        $module = $this->getModule();
        return view($this->getModule()->alias . '::backend.create', compact('model', 'module'));
    }

    /**
     * Store a newly created resource in storage.
     * @param  Request $request
     * @return Response
     */
    public function store(StoreOfficeRequest $request)
    {

        if ($request->has('file')) {
            $file_uploader = BaseUploader::file($request->file('file'));

            $file = File::create([
                'name' => $file_uploader->getFileName(),
                'path' => $file_uploader->getDestination(),
                'user_id' => auth()->guard('admin')->user()->id
            ]);

            $request->merge([
                'file_id' => $file->id
            ]);
        }

        $model = $this->getModel()->create($request->all());

        if ($request->has('images')) {
            foreach ($request->file('images') as $file) {
                $image_uploader = BaseUploader::image($file, 'uploads/offices', true, 1024, null, 530, null);

                $image = Image::create([
                    'name' => $image_uploader->getFileName(),
                    'thumb' => $image_uploader->getThumb(),
                    'path' => $image_uploader->getDestination(),
                ]);

                OfficeImage::create([
                    'image_id' => $image->id,
                    'office_id' => $model->id
                ]);
            }
        }

        return redirect('/admin/' . $this->getModule()->alias)->with('success', 'success');
    }

    /**
     * Show the specified resource.
     * @return Response
     */
    public function show()
    {
        return view($this->getModule()->alias . '::show');
    }

    /**
     * Show the form for editing the specified resource.
     * @param $id
     * @return \Illuminate\Contracts\View\Factory|\Illuminate\View\View
     */
    public function edit($id)
    {
        $model = $this->getModel()->findOrFail($id);
        $module = $this->getModule();
        return view($this->getModule()->alias . '::backend.edit', compact('model', 'module'));
    }

    /**
     * Update the specified resource in storage.
     * @param $id
     * @return \Illuminate\Http\RedirectResponse
     */
    public function update(UpdateOfficeRequest $request, $id)
    {
        $model = $this->getModel()->findOrFail($id);


        if ($request->has('file')) {
            $file_uploader = BaseUploader::file($request->file('file'));

            $file = File::create([
                'name' => $file_uploader->getFileName(),
                'path' => $file_uploader->getDestination(),
                'user_id' => auth()->guard('admin')->user()->id
            ]);

            $request->merge([
                'file_id' => $file->id
            ]);
        }

        $model->update($request->all());

        if ($request->has('images')) {
            foreach ($request->file('images') as $file) {
                $image_uploader = BaseUploader::image($file, 'uploads/offices', true, 1024, null, 530, null);

                $image = Image::create([
                    'name' => $image_uploader->getFileName(),
                    'thumb' => $image_uploader->getThumb(),
                    'path' => $image_uploader->getDestination(),
                ]);

                OfficeImage::create([
                    'image_id' => $image->id,
                    'office_id' => $model->id
                ]);
            }
        }


        return redirect('/admin/' . $this->getModule()->alias)->with('success', 'success');
    }

    /**
     * Remove the specified resource from storage.
     * @return Response
     */
    public function destroy($id)
    {
        $model = $this->getModel()->findOrFail($id);
        $model->delete();
        return redirect()->back()->with('success', 'deleted');
    }

    public function removeFile($id)
    {
        $model = $this->getModel()->findOrFail($id);

        if($model->file)
        {
            if(file_exists(public_path($model->file->getFile())))
            {
                unlink(public_path($model->file->getFile()));
            }


            $model->file->delete();
        }

        $model->file_id = null;
        $model->save();

        return redirect()->back()->with('success', 'Планировка успешна удалена!');
    }

    public function removeImages($id, $officeImageId)
    {
        $model = $this->getModel()->findOrFail($id);

        if($officeImage = OfficeImage::findOrFail($officeImageId))
        {
            if(file_exists(public_path($officeImage->image->getThumb())))
            {
                unlink(public_path($officeImage->image->getThumb()));
            }

            if(file_exists(public_path($officeImage->image->getFullImage())))
            {
                unlink(public_path($officeImage->image->getFullImage()));
            }

            $officeImage->image->delete();
            $officeImage->delete();
        }

        return redirect()->back()->with('success', 'Фото успешно удалено');
    }

}